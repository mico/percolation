/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.testng.annotations.Test;
import org.testng.annotations.BeforeGroups;

import java.nio.file.Files;
import java.util.List;

import java.nio.file.Files;
import java.nio.file.FileSystems;
import java.io.IOException;
import java.util.Arrays;

import static org.testng.Assert.*;

public class PercolationTest {
    Percolation pc;

    @BeforeGroups("exception")
    public void setUpException() {
        pc = new Percolation(5);
    }

    // TODO: make separate test for every file (with file name)
    @Test
    public void percolatesForGivenData() {
        final List<Integer> files = Arrays.asList(1,2,3,4,5,6,7,8,10,20,50);
        files.forEach((file_id) -> {
            List<String> lines;
            try {
                lines = Files.readAllLines(FileSystems.getDefault().getPath("data/", String.format("input%s.txt", file_id)));
                Percolation pc = new Percolation(Integer.parseInt(lines.remove(0)));
                for (String line : lines) {
                    String[] row = line.trim().split("\\s+");
                    if (line.trim().length() == 0) continue;
                    pc.open(Integer.parseInt(row[0]), Integer.parseInt(row[1]));
                };

                assert pc.percolates() == true : String.format("File input%s.txt should percolate", file_id);
                // check for backwash bug
                // TODO: add this as separate test
                if (file_id == 20) {
                    assert pc.isFull(18, 1) == false;
                }

            } catch (IOException e) {
                System.out.print(e.toString());
            }
        });
    }


    @Test
    public void shouldPercolate() {
        Percolation pc = new Percolation(2);
        pc.open(1, 1);
        pc.open(2, 1);
        pc.open(2, 2);
        assertEquals(pc.percolates(), true);
    }

    @Test
    public void shouldOpenSite() {
        Percolation pc = new Percolation(1);
        pc.open(1, 1);
        assertEquals(pc.isOpen(1,1), true);
    }

    @Test
    public void shouldNotBeFullAfterInitialize() {
        Percolation pc = new Percolation(1);
        //pc.open(1, 1);
        assertEquals(pc.isFull(1,1), false);
    }

    @Test
    public void shouldBeFull() {
        Percolation pc = new Percolation(1);
        pc.open(1, 1);
        assertEquals(pc.isFull(1,1), true);
    }

    @Test
    public void connectToNeighbourCellsOnlyIfOpen() {
        Percolation pc = new Percolation(2);
        pc.open(1, 1);
        assertTrue(pc.isFull(1,1));
        assertFalse(pc.isFull(1,2));
        assertFalse(pc.isFull(2,2));
    }

    @Test
    public void cellsNotConnectedToTopShouldNotBeFull() {
        Percolation pc = new Percolation(3);
        pc.open(1, 1);
        pc.open(2, 1);
        pc.open(3, 1);
        pc.open(3, 3);
        assertFalse(pc.isFull(3,3));
    }

    @Test
    public void shouldOpenTwoCells() {
        Percolation pc = new Percolation(3);
        pc.open(1, 1);
        pc.open(2, 1);
        assertEquals(pc.numberOfOpenSites(), 2);
    }

    @Test
    public void shouldNotBeOpenAfterInitialize() {
        Percolation pc = new Percolation(1);
        //pc.open(1, 1);
        assertEquals(pc.isOpen(1,1), false);
    }

    // The constructor should throw a java.lang.IllegalArgumentException if n â‰¤ 0.
    @Test(expectedExceptions = IllegalArgumentException.class)
    public void shouldThrowIllegalArgumentException() {
        Percolation pc = new Percolation(-1);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void shouldThrowIllegalArgumentExceptionForOutOfBoundRowOrCol() {
        pc.open(1, 6);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void openShouldThrowIllegalArgumentExceptionForNegativeRowOrCol() {
        pc.open(1, -6);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void isOpenShouldThrowIllegalArgumentExceptionForNegativeRow() {
        pc.isOpen(-6, 1);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void isOpenShouldThrowIllegalArgumentExceptionForNegativeCol() {
        pc.isOpen(1, -6);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void isFullShouldThrowIllegalArgumentExceptionForNegativeRow() {
        pc.isFull(-5, 2);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void isFullShouldThrowIllegalArgumentExceptionForNegativeCol() {
        pc.isFull(1, -6);
    }

    // * n = 10, (row, col) = (5, 0)
    // - open() fails to throw an exception
    // - open() should throw a java.lang.IllegalArgumentException
    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void openShouldThrowIllegalArgumentExceptionForZeroRow() {
        pc.open(0, 5);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void openShouldThrowIllegalArgumentExceptionForZeroCol() {
        pc.open(5, 0);
    }


}
