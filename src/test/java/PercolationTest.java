/*
 * This Java source file was generated by the Gradle 'init' task.
 */
// package percolation;

import org.testng.annotations.Test;
import org.testng.annotations.BeforeGroups;
import static org.testng.Assert.assertEquals;

import java.nio.file.Files;
import java.util.List;

import java.nio.file.Files;
import java.nio.file.FileSystems;
import java.io.IOException;
import java.util.Arrays;

public class PercolationTest {
    Percolation pc;

    @BeforeGroups("exception")
    public void setUpException() {
        pc = new Percolation(5);
    }
    @Test
    public void percolatesForGivenData() {
        final List<Integer> files = Arrays.asList(1,2,3,4,5,6,7,8,10,20,50);
        files.forEach((file_id) -> {
            List<String> lines;
            try {
                lines = Files.readAllLines(FileSystems.getDefault().getPath("data/", String.format("input%s.txt", file_id)));
                Percolation pc = new Percolation(Integer.parseInt(lines.remove(0)));
                for (String line : lines) {
                    String[] row = line.trim().split("\\s+");
                    if (line.trim().length() == 0) { continue; }
                    pc.open(Integer.parseInt(row[0]), Integer.parseInt(row[1]));
                };

                assertEquals(pc.percolates(), true);
                // check for backwash bug
                if (file_id == 20) {
                    assertEquals(pc.isFull(18, 1), false);
                }

            } catch (IOException e) {
                System.out.print("io exception\n");
            }
        });
    }

    // The constructor should throw a java.lang.IllegalArgumentException if n â‰¤ 0.
    @Test(expectedExceptions = IllegalArgumentException.class)
    public void shouldThrowIllegalArgumentException() {
        Percolation pc = new Percolation(-1);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void shouldThrowIllegalArgumentExceptionForOutOfBoundRowOrCol() {
        pc.open(1, 6);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void openShouldThrowIllegalArgumentExceptionForNegativeRowOrCol() {
        pc.open(1, -6);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void isOpenShouldThrowIllegalArgumentExceptionForNegativeRowOrCol() {
        pc.isOpen(1, -6);
    }

    @Test(expectedExceptions = IllegalArgumentException.class, groups = "exception")
    public void isFullShouldThrowIllegalArgumentExceptionForNegativeRowOrCol() {
        pc.isFull(1, -6);
    }
}
